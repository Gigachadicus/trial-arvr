# import matplotlib.pyplot as plt
# from mpl_toolkits.mplot3d import Axes3D
# import json

# # Replace this with the coordinates you received from your backend

# # #Model coordinates
# # model_coordinates =  [[0.5000000810210724, 0.5190791872637089, 0.1160851764399512], [0.5000000810210735, 0.6941413035480569, 0.1478890940449289], [0.5000000810210743, 0.7892814931097021, 0.17934763551560315], [0.5000000810210741, 0.9426061247569238, 0.17534420068294], [0.5000000810210683, 1.0, 0.19572857289124107], [0.5286013744495267, 0.9178299805021093, 0.16556092764429559], [0.8445607922495648, 0.8971597952432319, 0.09013477017354107], [0.9196538490990906, 0.7449371801372457, 0.046263475138967204], [0.9918655127226493, 0.5701553891390014, 0.19463964003527706], [0.9880737091738006, 0.552331283442209, 0.24253360606415178], [0.9906484600025164, 0.5199891497567362, 0.28617575740511547], [0.9726018108632825, 0.5035322874305201, 0.29824632136663676], [0.9412514855806239, 0.48674371072124, 0.30754336782913133], [0.9796166874131987, 0.570426050972457, 0.23014003993362206], [0.9470973846872581, 0.5580915047911682, 0.26777280822187277], [0.9223577937395763, 0.5433996006559325, 0.291521465812541], [1.0, 0.5473870880868027, 0.22203419022384685], [0.9959255907695361, 0.5152716025876013, 0.2528104226784586], [0.960723850509639, 0.49679826009905204, 0.25848321012771786], [0.9279412393402535, 0.4788276108581083, 0.2662928801907106], [0.9990083417158474, 0.5453734474787971, 0.2011505012914904], [0.9971554906984996, 0.5137790144413003, 0.21634908221251103], [0.9582685080868375, 0.4970199831766811, 0.22369330009893243], [0.9346905105922195, 0.48096275566532115, 0.23092416243084912], [0.9957049091322175, 0.5447517338082585, 0.18018672819141934], [0.9890673596181386, 0.509132289945022, 0.1840272445798765], [0.9587252588766205, 0.49121103293303786, 0.1903581978994564], [0.9319196661593335, 0.47824288260041475, 0.195718016548702], [0.4713987855650122, 0.9178299805703762, 0.16556094119672643], [0.15543938846811634, 0.8971597101386959, 0.09013479145388083], [0.0803461958096472, 0.7449370493887755, 0.04626341249499056], [0.008134396300422056, 0.5701553071101493, 0.19463943987529858], [0.011926261642088426, 0.5523312246849937, 0.24253343776324504], [0.009351599748334778, 0.5199890995368646, 0.28617552749401004], [0.027398130934974122, 0.5035322659611473, 0.2982460046055382], [0.05874834252548245, 0.4867437197506691, 0.307543008339862], [0.02038333979891054, 0.5704259504537458, 0.23013986309845647], [0.052902678167109744, 0.5580913679914786, 0.26777262246776146], [0.07764232164697893, 0.543399438496439, 0.2915213581194289], [0.0, 0.5473869375863296, 0.22203404089894518], [0.004074364933513928, 0.5152715516768331, 0.2528101523580442], [0.03927613245943023, 0.4967981943981345, 0.25848294709481134], [0.07205863152220923, 0.4788275733923875, 0.2662925770774014], [0.00099158982272231, 0.5453733392920465, 0.20115033694345286], [0.002844377298746251, 0.5137789246101672, 0.2163488813877182], [0.041731156475281944, 0.4970199415901783, 0.22369306492118798], [0.06530912460261999, 0.4809627434572891, 0.23092397261671369], [0.004295021768240173, 0.5447515824365857, 0.18018661428710522], [0.01093258351510614, 0.509132162654557, 0.18402709682841897], [0.0412746496782126, 0.4912108886972441, 0.19035801214470574], [0.06808019382296601, 0.4782428002435273, 0.19571782964129156], [0.7114037077738008, 0.5264027718498063, 0.1274534518835721], [0.7447135991163005, 0.3316717718285721, 0.11271993198617539], [0.813726280137307, 0.04789686360003071, 0.0], [0.8784398419681824, 0.0, 0.13017868669960694], [0.2885964305467782, 0.5264027718328789, 0.1274534523665645], [0.255286529146378, 0.33167177173662105, 0.11271993292452707], [0.18627391131551585, 0.04789692611224405, 2.3560654234565847e-08], [0.12156032496982228, 5.8158271279560604e-08, 0.1301786893340355], [0.8137265448628598, 0.04789698920485581, 3.970542243183425e-07], [0.780735636140061, 0.25693923050010986, 1.0], [0.18627361717928492, 0.04789698920485581, 3.970542243183425e-07], [0.21926452590208378, 0.25693923050010986, 1.0], [0.5695722655969663, 0.8252605272652425, 0.31845032238281423]]  

# # #Human Coordinates
# #model_coordinates =   [[0.46340831188807446, 0.020930748327222304, 0.0], [0.4756207290597181, 0.00129847895729492, 0.03031073763082072], [0.4837837459455068, 0.0005217742249260977, 0.030086579605970366], [0.49126922203444495, 0.0, 0.02985961136598105], [0.45153751544733495, 0.005782812309142986, 0.03688795942854241], [0.4436268368192201, 0.007830574287715723, 0.03679935091662973], [0.43530386598139087, 0.00982227410139129, 0.03675140378919695], [0.5032004622903947, 0.01399262886124733, 0.21864691541072023], [0.42501181840062313, 0.023640348537260422, 0.25060173297988], [0.48331905791816915, 0.04166799077984574, 0.07056255927472302], [0.45019417051678123, 0.044704061694706226, 0.07999776986877613], [0.5924011142117326, 0.13274195264946897, 0.3282395119301612], [0.3575541732933404, 0.1430661659380972, 0.3907963927662148], [0.7669539662083025, 0.15207087695759405, 0.3355351426770512], [0.207415676476533, 0.18210779663534996, 0.4643417178588409], [0.9468127121139884, 0.14494299925086931, 0.1234793960577053], [0.05606044398287688, 0.20092414822604837, 0.3505339721010168], [0.9936902860585293, 0.14286062497918617, 0.08942579880191855], [0.0055861486584197605, 0.1991551127064318, 0.33656498244344113], [1.0, 0.1373584281802078, 0.01406540432265211], [0.0, 0.1974566728585906, 0.2662746150560364], [0.984205301735777, 0.13941213152951692, 0.08339008117566633], [0.017465328429979027, 0.201129293093577, 0.3150992408394619], [0.5417537240641751, 0.47433579207566784, 0.5412663852022258], [0.40069697335769083, 0.47098845427135655, 0.5871528833535901], [0.5281173143194919, 0.7099683008066645, 0.4737006970304977], [0.39464022642370544, 0.7157827394892657, 0.4854103344308669], [0.5012430383772957, 0.9142039253326307, 0.9585755900688524], [0.3887621282694885, 0.9360105231120998, 0.9312549907339227], [0.49788065205211784, 0.9315170187213201, 1.0], [0.3930999989688503, 0.9559208791010578, 0.968420016558759], [0.49156615961207983, 0.9891459992530935, 0.8230808589793798], [0.38328425032860564, 1.0, 0.7762167572365468]]


# model_ =   [[0.5000000810210724, 0.5190791872637089, 0.1160851764399512], [0.5000000810210735, 0.6941413035480569, 0.1478890940449289], [0.5000000810210743, 0.7892814931097021, 0.17934763551560315], [0.5000000810210741, 0.9426061247569238, 0.17534420068294], [0.5000000810210683, 1.0, 0.19572857289124107], [0.5286013744495267, 0.9178299805021093, 0.16556092764429559], [0.8445607922495648, 0.8971597952432319, 0.09013477017354107], [0.9196538490990906, 0.7449371801372457, 0.046263475138967204], [0.9918655127226493, 0.5701553891390014, 0.19463964003527706], [0.9880737091738006, 0.552331283442209, 0.24253360606415178], [0.9906484600025164, 0.5199891497567362, 0.28617575740511547], [0.9726018108632825, 0.5035322874305201, 0.29824632136663676], [0.9412514855806239, 0.48674371072124, 0.30754336782913133], [0.9796166874131987, 0.570426050972457, 0.23014003993362206], [0.9470973846872581, 0.5580915047911682, 0.26777280822187277], [0.9223577937395763, 0.5433996006559325, 0.291521465812541], [1.0, 0.5473870880868027, 0.22203419022384685], [0.9959255907695361, 0.5152716025876013, 0.2528104226784586], [0.960723850509639, 0.49679826009905204, 0.25848321012771786], [0.9279412393402535, 0.4788276108581083, 0.2662928801907106], [0.9990083417158474, 0.5453734474787971, 0.2011505012914904], [0.9971554906984996, 0.5137790144413003, 0.21634908221251103], [0.9582685080868375, 0.4970199831766811, 0.22369330009893243], [0.9346905105922195, 0.48096275566532115, 0.23092416243084912], [0.9957049091322175, 0.5447517338082585, 0.18018672819141934], [0.9890673596181386, 0.509132289945022, 0.1840272445798765], [0.9587252588766205, 0.49121103293303786, 0.1903581978994564], [0.9319196661593335, 0.47824288260041475, 0.195718016548702], [0.4713987855650122, 0.9178299805703762, 0.16556094119672643], [0.15543938846811634, 0.8971597101386959, 0.09013479145388083], [0.0803461958096472, 0.7449370493887755, 0.04626341249499056], [0.008134396300422056, 0.5701553071101493, 0.19463943987529858], [0.011926261642088426, 0.5523312246849937, 0.24253343776324504], [0.009351599748334778, 0.5199890995368646, 0.28617552749401004], [0.027398130934974122, 0.5035322659611473, 0.2982460046055382], [0.05874834252548245, 0.4867437197506691, 0.307543008339862], [0.02038333979891054, 0.5704259504537458, 0.23013986309845647], [0.052902678167109744, 0.5580913679914786, 0.26777262246776146], [0.07764232164697893, 0.543399438496439, 0.2915213581194289], [0.0, 0.5473869375863296, 0.22203404089894518], [0.004074364933513928, 0.5152715516768331, 0.2528101523580442], [0.03927613245943023, 0.4967981943981345, 0.25848294709481134], [0.07205863152220923, 0.4788275733923875, 0.2662925770774014], [0.00099158982272231, 0.5453733392920465, 0.20115033694345286], [0.002844377298746251, 0.5137789246101672, 0.2163488813877182], [0.041731156475281944, 0.4970199415901783, 0.22369306492118798], [0.06530912460261999, 0.4809627434572891, 0.23092397261671369], [0.004295021768240173, 0.5447515824365857, 0.18018661428710522], [0.01093258351510614, 0.509132162654557, 0.18402709682841897], [0.0412746496782126, 0.4912108886972441, 0.19035801214470574], [0.06808019382296601, 0.4782428002435273, 0.19571782964129156], [0.7114037077738008, 0.5264027718498063, 0.1274534518835721], [0.7447135991163005, 0.3316717718285721, 0.11271993198617539], [0.813726280137307, 0.04789686360003071, 0.0], [0.8784398419681824, 0.0, 0.13017868669960694], [0.2885964305467782, 0.5264027718328789, 0.1274534523665645], [0.255286529146378, 0.33167177173662105, 0.11271993292452707], [0.18627391131551585, 0.04789692611224405, 2.3560654234565847e-08], [0.12156032496982228, 5.8158271279560604e-08, 0.1301786893340355], [0.8137265448628598, 0.04789698920485581, 3.970542243183425e-07], [0.780735636140061, 0.25693923050010986, 1.0], [0.18627361717928492, 0.04789698920485581, 3.970542243183425e-07], [0.21926452590208378, 0.25693923050010986, 1.0], [0.5695722655969663, 0.8252605272652425, 0.31845032238281423]]
# model_coordinates = model_[15:]
# def plot_coordinates(coordinates):
#     fig = plt.figure()
#     ax = fig.add_subplot(111, projection='3d')

#     x_coords = [coord[0] for coord in coordinates]
#     y_coords = [coord[1] for coord in coordinates]
#     z_coords = [coord[2] for coord in coordinates]

#     ax.scatter(x_coords, y_coords, z_coords, c='r', marker='o')

#     ax.set_xlabel('X Coordinate')
#     ax.set_ylabel('Y Coordinate')
#     ax.set_zlabel('Z Coordinate')

#     plt.show()

# # Example usage
# plot_coordinates(model_coordinates)

# # import numpy as np

# # def normalize_coordinates(coordinates):
# #     if not coordinates:
# #         return coordinates

# #     x_coords = [coord[0] for coord in coordinates]
# #     y_coords = [coord[1] for coord in coordinates]
# #     z_coords = [coord[2] if len(coord) > 2 else 0 for coord in coordinates]  # Handle z if present

# #     min_x, max_x = min(x_coords), max(x_coords)
# #     min_y, max_y = min(y_coords), max(y_coords)
# #     min_z, max_z = min(z_coords), max(z_coords)

# #     normalized_coords = [
# #         [
# #             (x - min_x) / (max_x - min_x) if max_x != min_x else 0.5,
# #             (y - min_y) / (max_y - min_y) if max_y != min_y else 0.5,
# #             (z - min_z) / (max_z - min_z) if max_z != min_z else 0.5
# #         ]
# #         for x, y, z in zip(x_coords, y_coords, z_coords)
# #     ]
# #     return normalized_coords

# # def calculate_similarity(coords1, coords2):
# #     if not coords1 or not coords2 or len(coords1) != len(coords2):
# #         return 0.0

# #     total_diff = sum(
# #         np.linalg.norm(np.array(c1) - np.array(c2))
# #         for c1, c2 in zip(coords1, coords2)
# #     )
# #     return 1 - (total_diff / len(coords1))

# # def main():
# #     model_coordinates_1 =  [[0.49008299833897484, 0.03157557155510601, 0.0], [0.5343226278463495, 0.004107052504053381, 0.019357482279501743], [0.5575182391942407, 0.004330779462370076, 0.019314032033972042], [0.5795360286790892, 0.004915376117391047, 0.01926066091431041], [0.45619834929421316, 0.002293244210485969, 0.02037259460912963], [0.4299186068997482, 0.0009095631866541588, 0.020670379991496166], [0.4050935459480842, 0.0, 0.020518648975360713], [0.6287121641594734, 0.012026457471218282, 0.20563234550871284], [0.3731122072892391, 0.007267241741426533, 0.21943519933038874], [0.539534538100275, 0.05758181473564904, 0.07383438151082233], [0.4436938042415787, 0.057642837862629935, 0.07789435335410828], [0.8331820043037156, 0.12727436747813375, 0.3447130003850838], [0.20502369160365333, 0.12355119700662201, 0.36063955790462754], [0.9645834945738301, 0.28419283876694856, 0.38524499691511216], [0.0464724989311271, 0.2908432322729899, 0.43690963338364597], [0.957732300423955, 0.41589157900943635, 0.20443749028304758], [0.039742270985023434, 0.420684516756387, 0.2411613035720903], [1.0, 0.45922334175289103, 0.14282514822754167], [0.0, 0.46521238180322705, 0.18121163635773305], [0.9432521651429027, 0.46036675340446553, 0.10350023559423423], [0.05927899644355833, 0.46286002603359333, 0.12729775999660037], [0.9089919607968951, 0.44382933894896415, 0.17856981898728513], [0.08869662774183264, 0.4459417194336995, 0.21136204821592575], [0.723440476403101, 0.4271053260642127, 0.5547902854535236], [0.29494704806962324, 0.42604112194131377, 0.6359278329089242], [0.7019260439178321, 0.6915154963697121, 0.6222741105160443], [0.30216347812895317, 0.691980644542442, 0.6976014509517156], [0.6889805874159427, 0.9255123773772123, 0.9805339451594769], [0.3191387012251632, 0.9248510729360667, 0.9773485222446822], [0.6964639986628891, 0.9616923766821858, 1.0], [0.32066892590786944, 0.9610577361615845, 0.9971472712118435], [0.618623503385003, 1.0, 0.7088194793763993], [0.3641512708176641, 0.9974400675695116, 0.6766219985940477]]

# #     model_coordinates_2 =   [[0.46340831188807446, 0.020930748327222304, 0.0], [0.4756207290597181, 0.00129847895729492, 0.03031073763082072], [0.4837837459455068, 0.0005217742249260977, 0.030086579605970366], [0.49126922203444495, 0.0, 0.02985961136598105], [0.45153751544733495, 0.005782812309142986, 0.03688795942854241], [0.4436268368192201, 0.007830574287715723, 0.03679935091662973], [0.43530386598139087, 0.00982227410139129, 0.03675140378919695], [0.5032004622903947, 0.01399262886124733, 0.21864691541072023], [0.42501181840062313, 0.023640348537260422, 0.25060173297988], [0.48331905791816915, 0.04166799077984574, 0.07056255927472302], [0.45019417051678123, 0.044704061694706226, 0.07999776986877613], [0.5924011142117326, 0.13274195264946897, 0.3282395119301612], [0.3575541732933404, 0.1430661659380972, 0.3907963927662148], [0.7669539662083025, 0.15207087695759405, 0.3355351426770512], [0.207415676476533, 0.18210779663534996, 0.4643417178588409], [0.9468127121139884, 0.14494299925086931, 0.1234793960577053], [0.05606044398287688, 0.20092414822604837, 0.3505339721010168], [0.9936902860585293, 0.14286062497918617, 0.08942579880191855], [0.0055861486584197605, 0.1991551127064318, 0.33656498244344113], [1.0, 0.1373584281802078, 0.01406540432265211], [0.0, 0.1974566728585906, 0.2662746150560364], [0.984205301735777, 0.13941213152951692, 0.08339008117566633], [0.017465328429979027, 0.201129293093577, 0.3150992408394619], [0.5417537240641751, 0.47433579207566784, 0.5412663852022258], [0.40069697335769083, 0.47098845427135655, 0.5871528833535901], [0.5281173143194919, 0.7099683008066645, 0.4737006970304977], [0.39464022642370544, 0.7157827394892657, 0.4854103344308669], [0.5012430383772957, 0.9142039253326307, 0.9585755900688524], [0.3887621282694885, 0.9360105231120998, 0.9312549907339227], [0.49788065205211784, 0.9315170187213201, 1.0], [0.3930999989688503, 0.9559208791010578, 0.968420016558759], [0.49156615961207983, 0.9891459992530935, 0.8230808589793798], [0.38328425032860564, 1.0, 0.7762167572365468]]


# #     normalized_video_coords = normalize_coordinates(model_coordinates_1)
# #     normalized_model_coords = normalize_coordinates(model_coordinates_2)

# #     similarity_percentage = calculate_similarity(normalized_video_coords, normalized_model_coords) * 100

# #     print("Normalized video coordinates:", normalized_video_coords)
# #     print("Normalized model coordinates:", normalized_model_coords)
# #     print("Similarity Percentage:", similarity_percentage)

# # if __name__ == "__main__":
# #     main()


# import matplotlib.pyplot as plt
# from matplotlib.widgets import Button

# Example data: Replace with your actual coordinates
# import matplotlib.pyplot as plt
# from mpl_toolkits.mplot3d import Axes3D
# import json
# model_ =[[0.5000000810210724, 0.5190791872637089, 0.1160851764399512], [0.5000000810210735, 0.6941413035480569, 0.1478890940449289], [0.5000000810210743, 0.7892814931097021, 0.17934763551560315], [0.5000000810210741, 0.9426061247569238, 0.17534420068294], [0.5000000810210683, 1.0, 0.19572857289124107], [0.5286013744495267, 0.9178299805021093, 0.16556092764429559], [0.8445607922495648, 0.8971597952432319, 0.09013477017354107], [0.9196538490990906, 0.7449371801372457, 0.046263475138967204], [0.9918655127226493, 0.5701553891390014, 0.19463964003527706], [0.9880737091738006, 0.552331283442209, 0.24253360606415178], [0.9906484600025164, 0.5199891497567362, 0.28617575740511547], [0.9726018108632825, 0.5035322874305201, 0.29824632136663676], [0.9412514855806239, 0.48674371072124, 0.30754336782913133], [0.9796166874131987, 0.570426050972457, 0.23014003993362206], [0.9470973846872581, 0.5580915047911682, 0.26777280822187277], [0.9223577937395763, 0.5433996006559325, 0.291521465812541], [1.0, 0.5473870880868027, 0.22203419022384685], [0.9959255907695361, 0.5152716025876013, 0.2528104226784586], [0.960723850509639, 0.49679826009905204, 0.25848321012771786], [0.9279412393402535, 0.4788276108581083, 0.2662928801907106], [0.9990083417158474, 0.5453734474787971, 0.2011505012914904], [0.9971554906984996, 0.5137790144413003, 0.21634908221251103], [0.9582685080868375, 0.4970199831766811, 0.22369330009893243], [0.9346905105922195, 0.48096275566532115, 0.23092416243084912], [0.9957049091322175, 0.5447517338082585, 0.18018672819141934], [0.9890673596181386, 0.509132289945022, 0.1840272445798765], [0.9587252588766205, 0.49121103293303786, 0.1903581978994564], [0.9319196661593335, 0.47824288260041475, 0.195718016548702], [0.4713987855650122, 0.9178299805703762, 0.16556094119672643], [0.15543938846811634, 0.8971597101386959, 0.09013479145388083], [0.0803461958096472, 0.7449370493887755, 0.04626341249499056], [0.008134396300422056, 0.5701553071101493, 0.19463943987529858], [0.011926261642088426, 0.5523312246849937, 0.24253343776324504], [0.009351599748334778, 0.5199890995368646, 0.28617552749401004], [0.027398130934974122, 0.5035322659611473, 0.2982460046055382], [0.05874834252548245, 0.4867437197506691, 0.307543008339862], [0.02038333979891054, 0.5704259504537458, 0.23013986309845647], [0.052902678167109744, 0.5580913679914786, 0.26777262246776146], [0.07764232164697893, 0.543399438496439, 0.2915213581194289], [0.0, 0.5473869375863296, 0.22203404089894518], [0.004074364933513928, 0.5152715516768331, 0.2528101523580442], [0.03927613245943023, 0.4967981943981345, 0.25848294709481134], [0.07205863152220923, 0.4788275733923875, 0.2662925770774014], [0.00099158982272231, 0.5453733392920465, 0.20115033694345286], [0.002844377298746251, 0.5137789246101672, 0.2163488813877182], [0.041731156475281944, 0.4970199415901783, 0.22369306492118798], [0.06530912460261999, 0.4809627434572891, 0.23092397261671369], [0.004295021768240173, 0.5447515824365857, 0.18018661428710522], [0.01093258351510614, 0.509132162654557, 0.18402709682841897], [0.0412746496782126, 0.4912108886972441, 0.19035801214470574], [0.06808019382296601, 0.4782428002435273, 0.19571782964129156], [0.7114037077738008, 0.5264027718498063, 0.1274534518835721], [0.7447135991163005, 0.3316717718285721, 0.11271993198617539], [0.813726280137307, 0.04789686360003071, 0.0], [0.8784398419681824, 0.0, 0.13017868669960694], [0.2885964305467782, 0.5264027718328789, 0.1274534523665645], [0.255286529146378, 0.33167177173662105, 0.11271993292452707], [0.18627391131551585, 0.04789692611224405, 2.3560654234565847e-08], [0.12156032496982228, 5.8158271279560604e-08, 0.1301786893340355], [0.8137265448628598, 0.04789698920485581, 3.970542243183425e-07], [0.780735636140061, 0.25693923050010986, 1.0], [0.18627361717928492, 0.04789698920485581, 3.970542243183425e-07], [0.21926452590208378, 0.25693923050010986, 1.0], [0.5695722655969663, 0.8252605272652425, 0.31845032238281423]]

# model_coordinates = [model_[i] for i in range(len(model_)) if i not in [0, 1, 2, 4, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 60, 62, 63]]
# def plot_coordinates(coordinates):
#     fig = plt.figure()
#     ax = fig.add_subplot(111, projection='3d')

#     x_coords = [coord[0] for coord in coordinates]
#     y_coords = [coord[1] for coord in coordinates]
#     z_coords = [coord[2] for coord in coordinates]

#     ax.scatter(x_coords, y_coords, z_coords, c='r', marker='o')

#     ax.set_xlabel('X Coordinate')
#     ax.set_ylabel('Y Coordinate')
#     ax.set_zlabel('Z Coordinate')

#     plt.show()

# # Example usage
# plot_coordinates(model_coordinates)
# # List to store marked indices
# marked_indices = []
# current_index = 0

# # Function to plot coordinates
# def plot_coordinates(coordinates, marked_indices, current_index):
#     # Create or clear the current figure
#     fig = plt.gcf()
#     fig.clf()  # Clear the figure
    
#     ax = fig.add_subplot(111, projection='3d')

#     x = [point[0] for point in coordinates]
#     y = [point[1] for point in coordinates]
#     z = [point[2] for point in coordinates]
#     scatter = ax.scatter(x, y, z, picker=True)

#     # Mark points that have been selected
#     for idx in marked_indices:
#         ax.scatter(coordinates[idx][0], coordinates[idx][1], coordinates[idx][2], color='r', s=100)

#     # Mark the current coordinate in red
#     ax.scatter(coordinates[current_index][0], coordinates[current_index][1], coordinates[current_index][2], color='r', s=100)

#     ax.set_xlabel('X Coordinate')
#     ax.set_ylabel('Y Coordinate')
#     ax.set_zlabel('Z Coordinate')

#     # Button to mark the current coordinate
#     ax_mark = plt.axes([0.75, 0.15, 0.2, 0.075])
#     button_mark = Button(ax_mark, 'Mark')

#     def on_mark_button_click(event):
#         if current_index not in marked_indices:
#             marked_indices.append(current_index)
#             print(f"Coordinate {current_index} marked.")
#         else:
#             print(f"Coordinate {current_index} was already marked.")

#     button_mark.on_clicked(on_mark_button_click)

#     # Button to proceed to the next coordinate
#     ax_next = plt.axes([0.75, 0.05, 0.2, 0.075])  # Position of the "Next" button
#     button_next = Button(ax_next, 'Next')

#     def on_next_button_click(event):
#         nonlocal current_index
#         current_index += 1  # Move to the next coordinate

#         if current_index >= len(coordinates):
#             print(f"Marked coordinates: {marked_indices}")
#             plt.close(fig)  # Close the plot after marking the last coordinate
#         else:
#             plot_coordinates(coordinates, marked_indices, current_index)  # Redraw the plot with updated index

#     button_next.on_clicked(on_next_button_click)

#     plt.draw()  # Redraw the plot
#     plt.show()

# # Start by displaying the first coordinate
# plot_coordinates(model_coordinates, marked_indices, current_index)


coords2 =  [[0.5000000810210724, 0.5190791872637089, 0.1160851764399512], [0.5000000810210735, 0.6941413035480569, 0.1478890940449289], [0.5000000810210743, 0.7892814931097021, 0.17934763551560315], [0.5000000810210741, 0.9426061247569238, 0.17534420068294], [0.5000000810210683, 1.0, 0.19572857289124107], [0.5286013744495267, 0.9178299805021093, 0.16556092764429559], [0.8445607922495648, 0.8971597952432319, 0.09013477017354107], [0.9196538490990906, 0.7449371801372457, 0.046263475138967204], [0.9918655127226493, 0.5701553891390014, 0.19463964003527706], [0.9880737091738006, 0.552331283442209, 0.24253360606415178], [0.9906484600025164, 0.5199891497567362, 0.28617575740511547], [0.9726018108632825, 0.5035322874305201, 0.29824632136663676], [0.9412514855806239, 0.48674371072124, 0.30754336782913133], [0.9796166874131987, 0.570426050972457, 0.23014003993362206], [0.9470973846872581, 0.5580915047911682, 0.26777280822187277], [0.9223577937395763, 0.5433996006559325, 0.291521465812541], [1.0, 0.5473870880868027, 0.22203419022384685], [0.9959255907695361, 0.5152716025876013, 0.2528104226784586], [0.960723850509639, 0.49679826009905204, 0.25848321012771786], [0.9279412393402535, 0.4788276108581083, 0.2662928801907106], [0.9990083417158474, 0.5453734474787971, 0.2011505012914904], [0.9971554906984996, 0.5137790144413003, 0.21634908221251103], [0.9582685080868375, 0.4970199831766811, 0.22369330009893243], [0.9346905105922195, 0.48096275566532115, 0.23092416243084912], [0.9957049091322175, 0.5447517338082585, 0.18018672819141934], [0.9890673596181386, 0.509132289945022, 0.1840272445798765], [0.9587252588766205, 0.49121103293303786, 0.1903581978994564], [0.9319196661593335, 0.47824288260041475, 0.195718016548702], [0.4713987855650122, 0.9178299805703762, 0.16556094119672643], [0.15543938846811634, 0.8971597101386959, 0.09013479145388083], [0.0803461958096472, 0.7449370493887755, 0.04626341249499056], [0.008134396300422056, 0.5701553071101493, 0.19463943987529858], [0.011926261642088426, 0.5523312246849937, 0.24253343776324504], [0.009351599748334778, 0.5199890995368646, 0.28617552749401004], [0.027398130934974122, 0.5035322659611473, 0.2982460046055382], [0.05874834252548245, 0.4867437197506691, 0.307543008339862], [0.02038333979891054, 0.5704259504537458, 0.23013986309845647], [0.052902678167109744, 0.5580913679914786, 0.26777262246776146], [0.07764232164697893, 0.543399438496439, 0.2915213581194289], [0.0, 0.5473869375863296, 0.22203404089894518], [0.004074364933513928, 0.5152715516768331, 0.2528101523580442], [0.03927613245943023, 0.4967981943981345, 0.25848294709481134], [0.07205863152220923, 0.4788275733923875, 0.2662925770774014], [0.00099158982272231, 0.5453733392920465, 0.20115033694345286], [0.002844377298746251, 0.5137789246101672, 0.2163488813877182], [0.041731156475281944, 0.4970199415901783, 0.22369306492118798], [0.06530912460261999, 0.4809627434572891, 0.23092397261671369], [0.004295021768240173, 0.5447515824365857, 0.18018661428710522], [0.01093258351510614, 0.509132162654557, 0.18402709682841897], [0.0412746496782126, 0.4912108886972441, 0.19035801214470574], [0.06808019382296601, 0.4782428002435273, 0.19571782964129156], [0.7114037077738008, 0.5264027718498063, 0.1274534518835721], [0.7447135991163005, 0.3316717718285721, 0.11271993198617539], [0.813726280137307, 0.04789686360003071, 0.0], [0.8784398419681824, 0.0, 0.13017868669960694], [0.2885964305467782, 0.5264027718328789, 0.1274534523665645], [0.255286529146378, 0.33167177173662105, 0.11271993292452707], [0.18627391131551585, 0.04789692611224405, 2.3560654234565847e-08], [0.12156032496982228, 5.8158271279560604e-08, 0.1301786893340355], [0.8137265448628598, 0.04789698920485581, 3.970542243183425e-07], [0.780735636140061, 0.25693923050010986, 1.0], [0.18627361717928492, 0.04789698920485581, 3.970542243183425e-07], [0.21926452590208378, 0.25693923050010986, 1.0], [0.5695722655969663, 0.8252605272652425, 0.31845032238281423]]
coords1 =  [[0.44272668819721217, 0.030319955145208525, 0.06859092698652114], [0.4832129272086743, 0.0007289514937774471, 0.09646068645461088], [0.5060002756078217, 0.0, 0.09628820504217514], [0.5296780022690285, 0.00011090414438140347, 0.09619349454772338], [0.3912248954732383, 0.003420962381028942, 0.09807983288635522], [0.3587821576833217, 0.0038836318524446086, 0.09838291906308147], [0.3273915369658227, 0.00476808858311881, 0.09818027386950053], [0.5708196501247313, 0.009951061572228501, 0.32837646061340664], [0.2927702649919299, 0.016160572899122976, 0.3447740965790116], [0.49687007902285313, 0.05512544751376037, 0.15946633910941405], [0.38717103644938905, 0.058848377885520026, 0.16397736721450137], [0.848520400529664, 0.13691850211242593, 0.49102320520464393], [0.12532557829008875, 0.13975822387089187, 0.5082194571879598], [1.0, 0.29236049257130725, 0.49533596469817454], [0.0, 0.31154079632130394, 0.5113170224733393], [0.9597664524170633, 0.42137690882996687, 0.2385759244411766], [0.04717064534294586, 0.39711941640680354, 0.14702355898360525], [0.9928810479289742, 0.46824488816970156, 0.15438156943853554], [0.037774567672058064, 0.4355213900828363, 0.05173340356015741], [0.9122678989507246, 0.4634590966972063, 0.10952638959313027], [0.08994704683570953, 0.4196346897974912, 0.0], [0.8810591325442422, 0.4437959498234398, 0.20807080138428455], [0.10938788887973365, 0.4042356722747382, 0.1132005144593454], [0.7105696210718374, 0.43913471537116155, 0.6697829623062308], [0.24240777348499978, 0.44028751733864285, 0.7591232410548331], [0.7055872916479728, 0.6940864300399132, 0.6632841197704883], [0.26106747207433795, 0.6919022755676081, 0.7169459815975274], [0.7013575365753274, 0.9247337332607082, 0.9882442487933858], [0.27923406080829277, 0.9241614332340748, 0.9557192229306197], [0.7129379539164574, 0.961641735904068, 1.0], [0.2821761692122026, 0.963193782602609, 0.9677247226884279], [0.6196082437497574, 1.0, 0.6519856466056742], [0.3304168573395453, 0.9943587132144147, 0.5931804382274729]]

import numpy as np

def calculate_distance(point1, point2):
    """Calculate Euclidean distance between two points."""
    return np.linalg.norm(np.array(point1) - np.array(point2))

def compare_points(human_points, model_points):
    """Compare human points with model points, match the closest one, and remove the matched model point."""
    matched_indices = []
    model_points_copy = model_points.copy()  # Make a copy of model points for matching

    for human_idx, human_point in enumerate(human_points):
        min_distance = float('inf')
        best_match_index = None

        # Find the model point with the minimum distance from the current human point
        for model_idx, model_point in enumerate(model_points_copy):
            dist = calculate_distance(human_point, model_point)
            if dist < min_distance:
                min_distance = dist
                best_match_index = model_idx

        # If a match is found, record the index pair from the original model points list
        if best_match_index is not None:
            # Find the actual index of the matched model point in the original model_points list
            actual_model_idx = model_points.index(model_points_copy[best_match_index])
            matched_indices.append((human_idx, actual_model_idx))

            # Remove the matched model point from the copy to avoid future matches
            model_points_copy.pop(best_match_index)

    return matched_indices

# Example usage
human_points = [coords1[i] for i in range(len(coords1)) if i not in [1, 2, 3, 4, 5, 6, 7, 8, 17, 18, 19, 20, 21, 22, 27, 28]] + [[0,0,0], [0,0,0], [0,0,0]]
model_points = [coords2[i] for i in range(len(coords2)) if i not in [0, 1, 2, 4, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 60, 62, 63]]

matched_indices = compare_points(human_points, model_points)

# Print in the desired format
print("Matched Indices:", matched_indices)



    
# # Function to find the closest model point for each human point
# def find_closest_points(human_points, model_points):
#     matches = []
#     for i, human_point in enumerate(human_points):
#         # Calculate Euclidean distance between the current human_point and all model_points
#         distances = distance.cdist([human_point], model_points, metric='euclidean')
        
#         # Find the index of the closest model_point
#         closest_model_idx = np.argmin(distances)
        
#         # Append the index pair (human_point index, closest model_point index)
#         matches.append((i, closest_model_idx))
        
#         # Output the match for this human point
#         print(f"Match found: Human Point {i} -> Model Point {closest_model_idx}")
#     return matches

# # First round of matching
# print("Initial Matches:")
# initial_matches = find_closest_points(human_points, model_points)

# # Refine or verify matches by comparing again
# print("\nRefining Matches:")
# refined_matches = find_closest_points(human_points, model_points)

# # Output the refined matching pairs
# print("\nFinal Closest Matches (Human Point Index -> Model Point Index):")
# for match in refined_matches:
#     print(f"{match[0]} -> {match[1]}")
